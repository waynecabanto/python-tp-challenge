# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: eu-west-1                  
  ECS_SERVICE: waycab-fargate-service            
  ECS_CLUSTER: waycab-ecs-cluster              
  ECS_TASK_DEFINITION_ARN: arn:aws:ecs:eu-west-1:303981612052:task-definition/waycab-fargate-tdf:1
  CONTAINER_NAME: hellopy-container          
  TARGET_GROUP_ARN: arn:aws:elasticloadbalancing:eu-west-1:303981612052:targetgroup/waycab-tg/358fdcd873c1581c
  APP_PORT: 8080
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: waycab/hellopy
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: waycab/hellopy
        IMAGE_TAG: ${{ github.sha }}
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition-arn: ${{ env.ECS_TASK_DEFINITION_ARN }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Get Existing Targets in Target Group
      id: get-existing-targets
      run: |
        # Fetch current targets in the ALB target group
        EXISTING_TARGETS=$(aws elbv2 describe-target-health \
          --target-group-arn $TARGET_GROUP_ARN \
          --query 'TargetHealthDescriptions[].Target.Id' \
          --output text)

        # Export the targets for use in the next step
        echo "EXISTING_TARGETS=${EXISTING_TARGETS}" >> $GITHUB_ENV

    - name: Deregister Existing Targets
      if: env.EXISTING_TARGETS != ''
      run: |
        # Convert space-separated targets into JSON format for deregistration
        TARGETS=""
        for IP in $EXISTING_TARGETS; do
          TARGETS+="Id=$IP,Port=$APP_PORT "
        done

        # Deregister existing targets
        aws elbv2 deregister-targets \
          --target-group-arn $TARGET_GROUP_ARN \
          --targets $TARGETS

    - name: Get ECS Task Private IPs
      id: get-task-ips
      run: |
        # Get the task ARNs of the ECS service
        TASK_ARNS=$(aws ecs list-tasks \
            --cluster $ECS_CLUSTER \
            --service-name $ECS_SERVICE \
            --query 'taskArns' \
            --output text)
        
        # Initialize an empty list of IPs
        PRIVATE_IPS=()
        
        # Loop through each task to retrieve its private IP
        for TASK_ARN in $TASK_ARNS; do
            ENI_ID=$(aws ecs describe-tasks \
            --cluster $ECS_CLUSTER \
            --tasks $TASK_ARN \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
            --output text)
            
            PRIVATE_IP=$(aws ec2 describe-network-interfaces \
            --network-interface-ids $ENI_ID \
            --query 'NetworkInterfaces[0].PrivateIpAddress' \
            --output text)
            
            PRIVATE_IPS+=("$PRIVATE_IP")
        done

        # Export the private IPs as an environment variable for the next step
        echo "PRIVATE_IPS=${PRIVATE_IPS[*]}" >> $GITHUB_ENV

    - name: Register New Targets
      run: |
        IP_LIST=""
        for IP in $PRIVATE_IPS; do
            IP_LIST+="Id=$IP,Port=$APP_PORT "
        done
        
        echo "Changing the ALB Target group targets:"
        aws elbv2 register-targets \
            --target-group-arn $TARGET_GROUP_ARN \
            --targets $IP_LIST
